#include "../../include/Net/ExtendedProtocol.hpp"

using namespace Net;

std::map<uint8_t, std::string> ExtendedProtocol::blockTypes = {
	{ kCobblestoneSlab, "cobblestone slab" },
	{ kRope, "rope" },
	{ kSandstone, "sandstone" },
	{ kSnow, "snow" },
	{ kFire, "fire" },
	{ kLightPinkWool, "light pink wool" },
	{ kForestGreenWool, "forest green wool" },
	{ kBrownWool, "brown wool" },
	{ kDeepBlue, "deep blue" },
	{ kTurquoise, "turquoise" },
	{ kIce, "ice" },
	{ kCeramicTile, "ceramic tile" },
	{ kMagma, "magma" },
	{ kPillar, "pillar" },
	{ kCrate, "crate" },
	{ kStoneBrick, "stone brick" }
};

// Are the sizes necessary here? Packet has GetSize()
ExtendedProtocol::ExtendedProtocol()
{
	// Default callbacks
	m_defaultPacketHandlers.insert(std::make_pair(
		Opcodes::kExtInfo,
		OpcodeHandler{
			[this](std::shared_ptr<Client> client, Utils::BufferStream& reader) { ExtInfoOpcodeHandler(client, reader); },
			kExtInfoSize /* packet size */
		}
	));

	// Default callbacks
	m_defaultPacketHandlers.insert(std::make_pair(
		Opcodes::kExtEntry,
		OpcodeHandler{
			[this](std::shared_ptr<Client> client, Utils::BufferStream& reader) { ExtEntryOpcodeHandler(client, reader); },
			kExtEntrySize /* packet size */
		}
	));

	// Default callbacks
	m_defaultPacketHandlers.insert(std::make_pair(
		Opcodes::kCustomBlocks,
		OpcodeHandler{
			[this](std::shared_ptr<Client> client, Utils::BufferStream& reader) { CustomBlocksOpcodeHandler(client, reader); },
			kCustomBlocksSize /* packet size */
		}
	));

	// Default callbacks
	m_defaultPacketHandlers.insert(std::make_pair(
		Opcodes::kPlayerClicked,
		OpcodeHandler{
			[this](std::shared_ptr<Client> client, Utils::BufferStream& reader) { PlayerClickedOpcodeHandler(client, reader); },
			kPlayerClickedSize /* packet size */
		}
	));

	// Default callbacks
	m_defaultPacketHandlers.insert(std::make_pair(
		Opcodes::kTwoWayPing,
		OpcodeHandler{
			[this](std::shared_ptr<Client> client, Utils::BufferStream& reader) { TwoWayPingOpcodeHandler(client, reader); },
			kTwoWayPingSize /* packet size */
		}
	));
}


void ExtendedProtocol::ExtInfoOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader)
{
	//std::cout << "[ExtInfo]" << std::endl;

	if (onExtInfoCallback == nullptr)
		return;

	ExtInfoPacket packet;
	packet.Deserialize(reader);

	onExtInfoCallback(client, packet);
}

void ExtendedProtocol::ExtEntryOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader)
{
	//std::cout << "[ExtEntry]" << std::endl;

	if (onExtEntryCallback == nullptr)
		return;

	ExtEntryPacket packet;
	packet.Deserialize(reader);

	onExtEntryCallback(client, packet);
}

void ExtendedProtocol::CustomBlocksOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader)
{
	//std::cout << "[CustomBlocks]" << std::endl;

	if (onCustomBlocksCallback == nullptr)
		return;

	CustomBlocksPacket packet;
	packet.Deserialize(reader);

	onCustomBlocksCallback(client, packet);
}

void ExtendedProtocol::PlayerClickedOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader)
{
	//std::cout << "[PlayerClick]" << std::endl;

	if (onPlayerClickedCallback == nullptr)
		return;

	PlayerClickedPacket packet;
	packet.Deserialize(reader);

	onPlayerClickedCallback(client, packet);
}

void ExtendedProtocol::TwoWayPingOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader)
{
	//std::cout << "[TwoWayPing]" << std::endl;

	if (onTwoWayPingCallback == nullptr)
		return;

	TwoWayPingPacket packet;
	packet.Deserialize(reader);

	onTwoWayPingCallback(client, packet);
}

size_t ExtendedProtocol::GetPacketSize(uint8_t opcode) const
{
	auto packetHandlerEntry = m_defaultPacketHandlers.find(static_cast<Opcodes>(opcode));
	if (packetHandlerEntry != m_defaultPacketHandlers.end())
		return packetHandlerEntry->second.packetSize;
	else
		return 0;
}

bool ExtendedProtocol::HandleOpcode(uint8_t opcode, std::shared_ptr<Client> client, Utils::BufferStream& reader) const
{
	auto packetHandlerEntry = m_defaultPacketHandlers.find(static_cast<Opcodes>(opcode));
	if (packetHandlerEntry != m_defaultPacketHandlers.end()) {
		packetHandlerEntry->second.handler(client, reader);
		return true;
	}

	return false;
}

/* BEGIN AUTOGENERATED CODE SECTION */
std::shared_ptr<Packet> ExtendedProtocol::MakeExtInfoPacket(
	Utils::MCString appName,
	uint16_t extensionCount
)
{
	return std::make_shared<ExtendedProtocol::ExtInfoPacket>(
		appName,
		extensionCount
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeExtEntryPacket(
	Utils::MCString extName,
	uint32_t version
)
{
	return std::make_shared<ExtendedProtocol::ExtEntryPacket>(
		extName,
		version
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetClickDistancePacket(
	uint16_t distance
)
{
	return std::make_shared<ExtendedProtocol::SetClickDistancePacket>(
		distance
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeCustomBlocksPacket(
	uint8_t supportLevel
)
{
	return std::make_shared<ExtendedProtocol::CustomBlocksPacket>(
		supportLevel
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeHoldThisPacket(
	uint8_t blockToHold,
	uint8_t preventChange
)
{
	return std::make_shared<ExtendedProtocol::HoldThisPacket>(
		blockToHold,
		preventChange
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetTextHotKeyPacket(
	Utils::MCString label,
	Utils::MCString action,
	uint32_t keyCode,
	uint8_t keyMods
)
{
	return std::make_shared<ExtendedProtocol::SetTextHotKeyPacket>(
		label,
		action,
		keyCode,
		keyMods
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeExtAddPlayerNamePacket(
	uint16_t nameID,
	Utils::MCString playerName,
	Utils::MCString listName,
	Utils::MCString groupName,
	uint8_t groupRank
)
{
	return std::make_shared<ExtendedProtocol::ExtAddPlayerNamePacket>(
		nameID,
		playerName,
		listName,
		groupName,
		groupRank
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeExtAddEntity2Packet(
	uint8_t entityID,
	Utils::MCString inGameName,
	Utils::MCString skinName,
	int16_t spawnX,
	int16_t spawnY,
	int16_t spawnZ,
	uint8_t spawnYaw,
	uint8_t spawnPitch
)
{
	return std::make_shared<ExtendedProtocol::ExtAddEntity2Packet>(
		entityID,
		inGameName,
		skinName,
		spawnX,
		spawnY,
		spawnZ,
		spawnYaw,
		spawnPitch
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeExtRemovePlayerNamePacket(
	uint16_t nameID
)
{
	return std::make_shared<ExtendedProtocol::ExtRemovePlayerNamePacket>(
		nameID
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeEnvSetColorPacket(
	uint8_t variable,
	uint16_t red,
	uint16_t green,
	uint16_t blue
)
{
	return std::make_shared<ExtendedProtocol::EnvSetColorPacket>(
		variable,
		red,
		green,
		blue
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeMakeSelectionPacket(
	uint8_t selectionID,
	Utils::MCString label,
	int16_t startX,
	int16_t startY,
	int16_t startZ,
	int16_t endX,
	int16_t endY,
	int16_t endZ,
	uint16_t red,
	uint16_t green,
	uint16_t blue,
	uint16_t opacity
)
{
	return std::make_shared<ExtendedProtocol::MakeSelectionPacket>(
		selectionID,
		label,
		startX,
		startY,
		startZ,
		endX,
		endY,
		endZ,
		red,
		green,
		blue,
		opacity
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeRemoveSelectionPacket(
	uint8_t selectionID
)
{
	return std::make_shared<ExtendedProtocol::RemoveSelectionPacket>(
		selectionID
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetBlockPermissionPacket(
	uint8_t blockType,
	uint8_t allowPlacement,
	uint8_t allowDeletion
)
{
	return std::make_shared<ExtendedProtocol::SetBlockPermissionPacket>(
		blockType,
		allowPlacement,
		allowDeletion
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeChangeModelPacket(
	uint8_t entityID,
	Utils::MCString modelName
)
{
	return std::make_shared<ExtendedProtocol::ChangeModelPacket>(
		entityID,
		modelName
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeEnvSetWeatherTypePacket(
	uint8_t weatherType
)
{
	return std::make_shared<ExtendedProtocol::EnvSetWeatherTypePacket>(
		weatherType
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeHackControlPacket(
	uint8_t flying,
	uint8_t noClip,
	uint8_t speeding,
	uint8_t spawnControl,
	uint8_t thirdPersonView,
	int16_t jumpHeight
)
{
	return std::make_shared<ExtendedProtocol::HackControlPacket>(
		flying,
		noClip,
		speeding,
		spawnControl,
		thirdPersonView,
		jumpHeight
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeDefineBlockPacket(
	uint8_t blockID,
	Utils::MCString name,
	uint8_t solidity,
	uint8_t movementSpeed,
	uint8_t topTextureID,
	uint8_t sideTextureID,
	uint8_t bottomTextureID,
	uint8_t transmitLight,
	uint8_t walkSound,
	uint8_t fullBright,
	uint8_t shape,
	uint8_t blockDraw,
	uint8_t fogDensity,
	uint8_t fogR,
	uint8_t fogG,
	uint8_t fogB
)
{
	return std::make_shared<ExtendedProtocol::DefineBlockPacket>(
		blockID,
		name,
		solidity,
		movementSpeed,
		topTextureID,
		sideTextureID,
		bottomTextureID,
		transmitLight,
		walkSound,
		fullBright,
		shape,
		blockDraw,
		fogDensity,
		fogR,
		fogG,
		fogB
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeRemoveBlockDefinitionPacket(
	uint8_t blockID
)
{
	return std::make_shared<ExtendedProtocol::RemoveBlockDefinitionPacket>(
		blockID
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeDefineBlockExtPacket(
	uint8_t blockID,
	Utils::MCString name,
	uint8_t solidity,
	uint8_t movementSpeed,
	uint8_t topTextureID,
	uint8_t leftTextureID,
	uint8_t rightTextureID,
	uint8_t frontTextureID,
	uint8_t backTextureID,
	uint8_t bottomTextureID,
	uint8_t transmitLight,
	uint8_t walkSound,
	uint8_t fullBright,
	uint8_t minX,
	uint8_t minY,
	uint8_t minZ,
	uint8_t maxX,
	uint8_t maxY,
	uint8_t maxZ,
	uint8_t blockDraw,
	uint8_t fogDensity,
	uint8_t fogR,
	uint8_t fogG,
	uint8_t fogB
)
{
	return std::make_shared<ExtendedProtocol::DefineBlockExtPacket>(
		blockID,
		name,
		solidity,
		movementSpeed,
		topTextureID,
		leftTextureID,
		rightTextureID,
		frontTextureID,
		backTextureID,
		bottomTextureID,
		transmitLight,
		walkSound,
		fullBright,
		minX,
		minY,
		minZ,
		maxX,
		maxY,
		maxZ,
		blockDraw,
		fogDensity,
		fogR,
		fogG,
		fogB
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetTextColorPacket(
	uint8_t red,
	uint8_t green,
	uint8_t blue,
	uint8_t alpha,
	uint8_t code
)
{
	return std::make_shared<ExtendedProtocol::SetTextColorPacket>(
		red,
		green,
		blue,
		alpha,
		code
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetMapEnvURLPacket(
	Utils::MCString texturePackURL
)
{
	return std::make_shared<ExtendedProtocol::SetMapEnvURLPacket>(
		texturePackURL
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetMapEnvPropertyPacket(
	uint8_t propertyType,
	int32_t propertyValue
)
{
	return std::make_shared<ExtendedProtocol::SetMapEnvPropertyPacket>(
		propertyType,
		propertyValue
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetEntityPropertyPacket(
	uint8_t entityID,
	uint8_t propertyType,
	int32_t propertyValue
)
{
	return std::make_shared<ExtendedProtocol::SetEntityPropertyPacket>(
		entityID,
		propertyType,
		propertyValue
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeTwoWayPingPacket(
	uint8_t direction,
	uint16_t data
)
{
	return std::make_shared<ExtendedProtocol::TwoWayPingPacket>(
		direction,
		data
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetInventoryOrderPacket(
	uint8_t order,
	uint8_t blockID
)
{
	return std::make_shared<ExtendedProtocol::SetInventoryOrderPacket>(
		order,
		blockID
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetHotbarPacket(
	uint8_t blockID,
	uint8_t hotbarIndex
)
{
	return std::make_shared<ExtendedProtocol::SetHotbarPacket>(
		blockID,
		hotbarIndex
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSetSpawnpointPacket(
	int16_t spawnX,
	int16_t spawnY,
	int16_t spawnZ,
	uint8_t spawnYaw,
	uint8_t spawnPitch
)
{
	return std::make_shared<ExtendedProtocol::SetSpawnpointPacket>(
		spawnX,
		spawnY,
		spawnZ,
		spawnYaw,
		spawnPitch
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeVelocityControlPacket(
	int32_t velocityX,
	int32_t velocityY,
	int32_t velocityZ,
	uint8_t modeX,
	uint8_t modeY,
	uint8_t modeZ
)
{
	return std::make_shared<ExtendedProtocol::VelocityControlPacket>(
		velocityX,
		velocityY,
		velocityZ,
		modeX,
		modeY,
		modeZ
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeDefineEffectPacket(
	uint8_t effectID,
	uint8_t u1,
	uint8_t v1,
	uint8_t u2,
	uint8_t v2,
	uint8_t redTint,
	uint8_t greenTint,
	uint8_t blueTint,
	uint8_t frameCount,
	uint8_t particleCount,
	uint8_t size,
	int32_t sizeVariation,
	uint16_t spread,
	int32_t speed,
	int32_t gravity,
	int32_t baseLifetime,
	int32_t lifetimeVariation,
	uint8_t collideFlags,
	uint8_t fullBright
)
{
	return std::make_shared<ExtendedProtocol::DefineEffectPacket>(
		effectID,
		u1,
		v1,
		u2,
		v2,
		redTint,
		greenTint,
		blueTint,
		frameCount,
		particleCount,
		size,
		sizeVariation,
		spread,
		speed,
		gravity,
		baseLifetime,
		lifetimeVariation,
		collideFlags,
		fullBright
		);
}

std::shared_ptr<Packet> ExtendedProtocol::MakeSpawnEffectPacket(
	uint8_t effectID,
	int32_t positionX,
	int32_t positionY,
	int32_t positionZ,
	int32_t originX,
	int32_t originY,
	int32_t originZ
)
{
	return std::make_shared<ExtendedProtocol::SpawnEffectPacket>(
		effectID,
		positionX,
		positionY,
		positionZ,
		originX,
		originY,
		originZ
		);
}
/* END AUTOGENERATED CODE SECTION */
