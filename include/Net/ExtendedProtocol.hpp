#ifndef EXTENDEDPROTOCOL_H_
#define EXTENDEDPROTOCOL_H_

#include "IProtocol.hpp"
#include "Packet.hpp"
#include "../Utils/MCString.hpp"

#include <map>
#include <memory>

// FIXME: only used for htonl?
#ifdef __linux__
#include <arpa/inet.h>
#elif _WIN32
#define NOMINMAX // bug with winsock redefining min
#include <winsock2.h>
#undef NOMINMAX
#endif

namespace Net {
	class Client;

	class ExtendedProtocol final : public IProtocol {
	public:
		enum BlockType {
			kCobblestoneSlab = 0x32,
			kRope,
			kSandstone,
			kSnow,
			kFire,
			kLightPinkWool,
			kForestGreenWool,
			kBrownWool,
			kDeepBlue,
			kTurquoise,
			kIce,
			kCeramicTile,
			kMagma,
			kPillar,
			kCrate,
			kStoneBrick
		};

		static std::map<uint8_t, std::string> blockTypes;

		virtual bool IsValidBlock(uint8_t type) const override
		{
			auto iter = blockTypes.find(type);
			if (iter != blockTypes.end())
				return true;
			return false;
		}

		virtual std::string GetBlockNameByType(uint8_t type) const override
		{
			std::string name;
			auto iter = blockTypes.find(type);
			if (iter != blockTypes.end())
				name = iter->second;
			return name;
		}

		/* BEGIN AUTOGENERATED CODE SECTION */
		enum Opcodes {
			kExtInfo = 0x10,
			kExtEntry = 0x11,
			kSetClickDistance = 0x12,
			kCustomBlocks = 0x13,
			kHoldThis = 0x14,
			kSetTextHotKey = 0x15,
			kExtAddPlayerName = 0x16,
			kExtAddEntity2 = 0x21,
			kExtRemovePlayerName = 0x18,
			kEnvSetColor = 0x19,
			kMakeSelection = 0x1A,
			kRemoveSelection = 0x1B,
			kSetBlockPermission = 0x1C,
			kChangeModel = 0x1D,
			kEnvSetWeatherType = 0x1F,
			kHackControl = 0x20,
			kPlayerClicked = 0x22,
			kDefineBlock = 0x23,
			kRemoveBlockDefinition = 0x24,
			kDefineBlockExt = 0x25,
			kSetTextColor = 0x27,
			kSetMapEnvURL = 0x28,
			kSetMapEnvProperty = 0x29,
			kSetEntityProperty = 0x2A,
			kTwoWayPing = 0x2B,
			kSetInventoryOrder = 0x2C,
			kSetHotbar = 0x2D,
			kSetSpawnpoint = 0x2E,
			kVelocityControl = 0x2F,
			kDefineEffect = 0x30,
			kSpawnEffect = 0x31
		};

		static const uint32_t kExtInfoSize = 67;
		static const uint32_t kExtEntrySize = 69;
		static const uint32_t kSetClickDistanceSize = 3;
		static const uint32_t kCustomBlocksSize = 2;
		static const uint32_t kHoldThisSize = 3;
		static const uint32_t kSetTextHotKeySize = 134;
		static const uint32_t kExtAddPlayerNameSize = 196;
		static const uint32_t kExtAddEntity2Size = 138;
		static const uint32_t kExtRemovePlayerNameSize = 3;
		static const uint32_t kEnvSetColorSize = 8;
		static const uint32_t kMakeSelectionSize = 86;
		static const uint32_t kRemoveSelectionSize = 2;
		static const uint32_t kSetBlockPermissionSize = 4;
		static const uint32_t kChangeModelSize = 66;
		static const uint32_t kEnvSetWeatherTypeSize = 2;
		static const uint32_t kHackControlSize = 8;
		static const uint32_t kPlayerClickedSize = 15;
		static const uint32_t kDefineBlockSize = 80;
		static const uint32_t kRemoveBlockDefinitionSize = 2;
		static const uint32_t kDefineBlockExtSize = 88;
		static const uint32_t kSetTextColorSize = 6;
		static const uint32_t kSetMapEnvURLSize = 65;
		static const uint32_t kSetMapEnvPropertySize = 6;
		static const uint32_t kSetEntityPropertySize = 7;
		static const uint32_t kTwoWayPingSize = 4;
		static const uint32_t kSetInventoryOrderSize = 3;
		static const uint32_t kSetHotbarSize = 3;
		static const uint32_t kSetSpawnpointSize = 9;
		static const uint32_t kVelocityControlSize = 16;
		static const uint32_t kDefineEffectSize = 36;
		static const uint32_t kSpawnEffectSize = 26;

		// Server <-> Client
		class ExtInfoPacket final : public Packet {
		public:
			Utils::MCString appName;
			uint16_t extensionCount;

			ExtInfoPacket() : ExtInfoPacket(std::string(), 0) {}
			ExtInfoPacket(Utils::MCString appName, uint16_t extensionCount) :
				Packet(Opcodes::kExtInfo, kExtInfoSize),
				appName(appName),
				extensionCount(extensionCount)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
				// Skip opcode because each packet knows its opcode
				reader.Skip(sizeof(m_opcode));

				reader.ReadMCString(appName);
				reader.ReadUInt16(extensionCount);

				extensionCount = ntohs(extensionCount);
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteMCString(appName);
					writer->WriteUInt16(htons(extensionCount));
				}

				return std::move(writer);
			}
		};
		// Server <-> Client
		class ExtEntryPacket final : public Packet {
		public:
			Utils::MCString extName;
			uint32_t version;

			ExtEntryPacket() : ExtEntryPacket(std::string(), 0) {}
			ExtEntryPacket(Utils::MCString extName, uint32_t version) :
				Packet(Opcodes::kExtEntry, kExtEntrySize),
				extName(extName),
				version(version)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
				// Skip opcode because each packet knows its opcode
				reader.Skip(sizeof(m_opcode));

				reader.ReadMCString(extName);
				reader.ReadUInt32(version);

				version = ntohl(version);
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteMCString(extName);
					writer->WriteUInt32(htonl(version));
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetClickDistancePacket final : public Packet {
		public:
			uint16_t distance;

			SetClickDistancePacket() : SetClickDistancePacket(0) {}
			SetClickDistancePacket(uint16_t distance) :
				Packet(Opcodes::kSetClickDistance, kSetClickDistanceSize),
				distance(distance)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt16(htons(distance));
				}

				return std::move(writer);
			}
		};
		// Server <-> Client
		class CustomBlocksPacket final : public Packet {
		public:
			uint8_t supportLevel;

			CustomBlocksPacket() : CustomBlocksPacket(0) {}
			CustomBlocksPacket(uint8_t supportLevel) :
				Packet(Opcodes::kCustomBlocks, kCustomBlocksSize),
				supportLevel(supportLevel)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
				// Skip opcode because each packet knows its opcode
				reader.Skip(sizeof(m_opcode));

				reader.ReadUInt8(supportLevel);
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(supportLevel);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class HoldThisPacket final : public Packet {
		public:
			uint8_t blockToHold;
			uint8_t preventChange;

			HoldThisPacket() : HoldThisPacket(0, 0) {}
			HoldThisPacket(uint8_t blockToHold, uint8_t preventChange) :
				Packet(Opcodes::kHoldThis, kHoldThisSize),
				blockToHold(blockToHold),
				preventChange(preventChange)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(blockToHold);
					writer->WriteUInt8(preventChange);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetTextHotKeyPacket final : public Packet {
		public:
			Utils::MCString label;
			Utils::MCString action;
			uint32_t keyCode;
			uint8_t keyMods;

			SetTextHotKeyPacket() : SetTextHotKeyPacket(std::string(), std::string(), 0, 0) {}
			SetTextHotKeyPacket(Utils::MCString label, Utils::MCString action, uint32_t keyCode, uint8_t keyMods) :
				Packet(Opcodes::kSetTextHotKey, kSetTextHotKeySize),
				label(label),
				action(action),
				keyCode(keyCode),
				keyMods(keyMods)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteMCString(label);
					writer->WriteMCString(action);
					writer->WriteUInt32(htonl(keyCode));
					writer->WriteUInt8(keyMods);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class ExtAddPlayerNamePacket final : public Packet {
		public:
			uint16_t nameID;
			Utils::MCString playerName;
			Utils::MCString listName;
			Utils::MCString groupName;
			uint8_t groupRank;

			ExtAddPlayerNamePacket() : ExtAddPlayerNamePacket(0, std::string(), std::string(), std::string(), 0) {}
			ExtAddPlayerNamePacket(uint16_t nameID, Utils::MCString playerName, Utils::MCString listName, Utils::MCString groupName, uint8_t groupRank) :
				Packet(Opcodes::kExtAddPlayerName, kExtAddPlayerNameSize),
				nameID(nameID),
				playerName(playerName),
				listName(listName),
				groupName(groupName),
				groupRank(groupRank)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt16(htons(nameID));
					writer->WriteMCString(playerName);
					writer->WriteMCString(listName);
					writer->WriteMCString(groupName);
					writer->WriteUInt8(groupRank);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class ExtAddEntity2Packet final : public Packet {
		public:
			uint8_t entityID;
			Utils::MCString inGameName;
			Utils::MCString skinName;
			int16_t spawnX;
			int16_t spawnY;
			int16_t spawnZ;
			uint8_t spawnYaw;
			uint8_t spawnPitch;

			ExtAddEntity2Packet() : ExtAddEntity2Packet(0, std::string(), std::string(), 0, 0, 0, 0, 0) {}
			ExtAddEntity2Packet(uint8_t entityID, Utils::MCString inGameName, Utils::MCString skinName, int16_t spawnX, int16_t spawnY, int16_t spawnZ, uint8_t spawnYaw, uint8_t spawnPitch) :
				Packet(Opcodes::kExtAddEntity2, kExtAddEntity2Size),
				entityID(entityID),
				inGameName(inGameName),
				skinName(skinName),
				spawnX(spawnX),
				spawnY(spawnY),
				spawnZ(spawnZ),
				spawnYaw(spawnYaw),
				spawnPitch(spawnPitch)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(entityID);
					writer->WriteMCString(inGameName);
					writer->WriteMCString(skinName);
					writer->WriteInt16(htons(spawnX));
					writer->WriteInt16(htons(spawnY));
					writer->WriteInt16(htons(spawnZ));
					writer->WriteUInt8(spawnYaw);
					writer->WriteUInt8(spawnPitch);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class ExtRemovePlayerNamePacket final : public Packet {
		public:
			uint16_t nameID;

			ExtRemovePlayerNamePacket() : ExtRemovePlayerNamePacket(0) {}
			ExtRemovePlayerNamePacket(uint16_t nameID) :
				Packet(Opcodes::kExtRemovePlayerName, kExtRemovePlayerNameSize),
				nameID(nameID)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt16(htons(nameID));
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class EnvSetColorPacket final : public Packet {
		public:
			uint8_t variable;
			uint16_t red;
			uint16_t green;
			uint16_t blue;

			EnvSetColorPacket() : EnvSetColorPacket(0, 0, 0, 0) {}
			EnvSetColorPacket(uint8_t variable, uint16_t red, uint16_t green, uint16_t blue) :
				Packet(Opcodes::kEnvSetColor, kEnvSetColorSize),
				variable(variable),
				red(red),
				green(green),
				blue(blue)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(variable);
					writer->WriteUInt16(htons(red));
					writer->WriteUInt16(htons(green));
					writer->WriteUInt16(htons(blue));
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class MakeSelectionPacket final : public Packet {
		public:
			uint8_t selectionID;
			Utils::MCString label;
			int16_t startX;
			int16_t startY;
			int16_t startZ;
			int16_t endX;
			int16_t endY;
			int16_t endZ;
			uint16_t red;
			uint16_t green;
			uint16_t blue;
			uint16_t opacity;

			MakeSelectionPacket() : MakeSelectionPacket(0, std::string(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) {}
			MakeSelectionPacket(uint8_t selectionID, Utils::MCString label, int16_t startX, int16_t startY, int16_t startZ, int16_t endX, int16_t endY, int16_t endZ, uint16_t red, uint16_t green, uint16_t blue, uint16_t opacity) :
				Packet(Opcodes::kMakeSelection, kMakeSelectionSize),
				selectionID(selectionID),
				label(label),
				startX(startX),
				startY(startY),
				startZ(startZ),
				endX(endX),
				endY(endY),
				endZ(endZ),
				red(red),
				green(green),
				blue(blue),
				opacity(opacity)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(selectionID);
					writer->WriteMCString(label);
					writer->WriteInt16(htons(startX));
					writer->WriteInt16(htons(startY));
					writer->WriteInt16(htons(startZ));
					writer->WriteInt16(htons(endX));
					writer->WriteInt16(htons(endY));
					writer->WriteInt16(htons(endZ));
					writer->WriteUInt16(htons(red));
					writer->WriteUInt16(htons(green));
					writer->WriteUInt16(htons(blue));
					writer->WriteUInt16(htons(opacity));
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class RemoveSelectionPacket final : public Packet {
		public:
			uint8_t selectionID;

			RemoveSelectionPacket() : RemoveSelectionPacket(0) {}
			RemoveSelectionPacket(uint8_t selectionID) :
				Packet(Opcodes::kRemoveSelection, kRemoveSelectionSize),
				selectionID(selectionID)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(selectionID);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetBlockPermissionPacket final : public Packet {
		public:
			uint8_t blockType;
			uint8_t allowPlacement;
			uint8_t allowDeletion;

			SetBlockPermissionPacket() : SetBlockPermissionPacket(0, 0, 0) {}
			SetBlockPermissionPacket(uint8_t blockType, uint8_t allowPlacement, uint8_t allowDeletion) :
				Packet(Opcodes::kSetBlockPermission, kSetBlockPermissionSize),
				blockType(blockType),
				allowPlacement(allowPlacement),
				allowDeletion(allowDeletion)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(blockType);
					writer->WriteUInt8(allowPlacement);
					writer->WriteUInt8(allowDeletion);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class ChangeModelPacket final : public Packet {
		public:
			uint8_t entityID;
			Utils::MCString modelName;

			ChangeModelPacket() : ChangeModelPacket(0, std::string()) {}
			ChangeModelPacket(uint8_t entityID, Utils::MCString modelName) :
				Packet(Opcodes::kChangeModel, kChangeModelSize),
				entityID(entityID),
				modelName(modelName)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(entityID);
					writer->WriteMCString(modelName);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class EnvSetWeatherTypePacket final : public Packet {
		public:
			uint8_t weatherType;

			EnvSetWeatherTypePacket() : EnvSetWeatherTypePacket(0) {}
			EnvSetWeatherTypePacket(uint8_t weatherType) :
				Packet(Opcodes::kEnvSetWeatherType, kEnvSetWeatherTypeSize),
				weatherType(weatherType)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(weatherType);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class HackControlPacket final : public Packet {
		public:
			uint8_t flying;
			uint8_t noClip;
			uint8_t speeding;
			uint8_t spawnControl;
			uint8_t thirdPersonView;
			int16_t jumpHeight;

			HackControlPacket() : HackControlPacket(0, 0, 0, 0, 0, 0) {}
			HackControlPacket(uint8_t flying, uint8_t noClip, uint8_t speeding, uint8_t spawnControl, uint8_t thirdPersonView, int16_t jumpHeight) :
				Packet(Opcodes::kHackControl, kHackControlSize),
				flying(flying),
				noClip(noClip),
				speeding(speeding),
				spawnControl(spawnControl),
				thirdPersonView(thirdPersonView),
				jumpHeight(jumpHeight)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(flying);
					writer->WriteUInt8(noClip);
					writer->WriteUInt8(speeding);
					writer->WriteUInt8(spawnControl);
					writer->WriteUInt8(thirdPersonView);
					writer->WriteInt16(htons(jumpHeight));
				}

				return std::move(writer);
			}
		};
		// Client -> Server
		class PlayerClickedPacket final : public Packet {
		public:
			uint8_t button;
			uint8_t action;
			uint16_t yaw;
			uint16_t pitch;
			int8_t targetEntityID;
			int16_t targetBlockX;
			int16_t targetBlockY;
			int16_t targetBlockZ;
			uint8_t targetBlockFace;

			PlayerClickedPacket() : PlayerClickedPacket(0, 0, 0, 0, 0, 0, 0, 0, 0) {}
			PlayerClickedPacket(uint8_t button, uint8_t action, uint16_t yaw, uint16_t pitch, int8_t targetEntityID, int16_t targetBlockX, int16_t targetBlockY, int16_t targetBlockZ, uint8_t targetBlockFace) :
				Packet(Opcodes::kPlayerClicked, kPlayerClickedSize),
				button(button),
				action(action),
				yaw(yaw),
				pitch(pitch),
				targetEntityID(targetEntityID),
				targetBlockX(targetBlockX),
				targetBlockY(targetBlockY),
				targetBlockZ(targetBlockZ),
				targetBlockFace(targetBlockFace)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
				// Skip opcode because each packet knows its opcode
				reader.Skip(sizeof(m_opcode));

				reader.ReadUInt8(button);
				reader.ReadUInt8(action);
				reader.ReadUInt16(yaw);
				reader.ReadUInt16(pitch);
				reader.ReadInt8(targetEntityID);
				reader.ReadInt16(targetBlockX);
				reader.ReadInt16(targetBlockY);
				reader.ReadInt16(targetBlockZ);
				reader.ReadUInt8(targetBlockFace);

				yaw = ntohs(yaw);
				pitch = ntohs(pitch);
				targetBlockX = ntohs(targetBlockX);
				targetBlockY = ntohs(targetBlockY);
				targetBlockZ = ntohs(targetBlockZ);
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				return nullptr;
			}
		};
		// Server -> Client
		class DefineBlockPacket final : public Packet {
		public:
			uint8_t blockID;
			Utils::MCString name;
			uint8_t solidity;
			uint8_t movementSpeed;
			uint8_t topTextureID;
			uint8_t sideTextureID;
			uint8_t bottomTextureID;
			uint8_t transmitLight;
			uint8_t walkSound;
			uint8_t fullBright;
			uint8_t shape;
			uint8_t blockDraw;
			uint8_t fogDensity;
			uint8_t fogR;
			uint8_t fogG;
			uint8_t fogB;

			DefineBlockPacket() : DefineBlockPacket(0, std::string(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) {}
			DefineBlockPacket(uint8_t blockID, Utils::MCString name, uint8_t solidity, uint8_t movementSpeed, uint8_t topTextureID, uint8_t sideTextureID, uint8_t bottomTextureID, uint8_t transmitLight, uint8_t walkSound, uint8_t fullBright, uint8_t shape, uint8_t blockDraw, uint8_t fogDensity, uint8_t fogR, uint8_t fogG, uint8_t fogB) :
				Packet(Opcodes::kDefineBlock, kDefineBlockSize),
				blockID(blockID),
				name(name),
				solidity(solidity),
				movementSpeed(movementSpeed),
				topTextureID(topTextureID),
				sideTextureID(sideTextureID),
				bottomTextureID(bottomTextureID),
				transmitLight(transmitLight),
				walkSound(walkSound),
				fullBright(fullBright),
				shape(shape),
				blockDraw(blockDraw),
				fogDensity(fogDensity),
				fogR(fogR),
				fogG(fogG),
				fogB(fogB)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(blockID);
					writer->WriteMCString(name);
					writer->WriteUInt8(solidity);
					writer->WriteUInt8(movementSpeed);
					writer->WriteUInt8(topTextureID);
					writer->WriteUInt8(sideTextureID);
					writer->WriteUInt8(bottomTextureID);
					writer->WriteUInt8(transmitLight);
					writer->WriteUInt8(walkSound);
					writer->WriteUInt8(fullBright);
					writer->WriteUInt8(shape);
					writer->WriteUInt8(blockDraw);
					writer->WriteUInt8(fogDensity);
					writer->WriteUInt8(fogR);
					writer->WriteUInt8(fogG);
					writer->WriteUInt8(fogB);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class RemoveBlockDefinitionPacket final : public Packet {
		public:
			uint8_t blockID;

			RemoveBlockDefinitionPacket() : RemoveBlockDefinitionPacket(0) {}
			RemoveBlockDefinitionPacket(uint8_t blockID) :
				Packet(Opcodes::kRemoveBlockDefinition, kRemoveBlockDefinitionSize),
				blockID(blockID)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(blockID);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class DefineBlockExtPacket final : public Packet {
		public:
			uint8_t blockID;
			Utils::MCString name;
			uint8_t solidity;
			uint8_t movementSpeed;
			uint8_t topTextureID;
			uint8_t leftTextureID;
			uint8_t rightTextureID;
			uint8_t frontTextureID;
			uint8_t backTextureID;
			uint8_t bottomTextureID;
			uint8_t transmitLight;
			uint8_t walkSound;
			uint8_t fullBright;
			uint8_t minX;
			uint8_t minY;
			uint8_t minZ;
			uint8_t maxX;
			uint8_t maxY;
			uint8_t maxZ;
			uint8_t blockDraw;
			uint8_t fogDensity;
			uint8_t fogR;
			uint8_t fogG;
			uint8_t fogB;

			DefineBlockExtPacket() : DefineBlockExtPacket(0, std::string(), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) {}
			DefineBlockExtPacket(uint8_t blockID, Utils::MCString name, uint8_t solidity, uint8_t movementSpeed, uint8_t topTextureID, uint8_t leftTextureID, uint8_t rightTextureID, uint8_t frontTextureID, uint8_t backTextureID, uint8_t bottomTextureID, uint8_t transmitLight, uint8_t walkSound, uint8_t fullBright, uint8_t minX, uint8_t minY, uint8_t minZ, uint8_t maxX, uint8_t maxY, uint8_t maxZ, uint8_t blockDraw, uint8_t fogDensity, uint8_t fogR, uint8_t fogG, uint8_t fogB) :
				Packet(Opcodes::kDefineBlockExt, kDefineBlockExtSize),
				blockID(blockID),
				name(name),
				solidity(solidity),
				movementSpeed(movementSpeed),
				topTextureID(topTextureID),
				leftTextureID(leftTextureID),
				rightTextureID(rightTextureID),
				frontTextureID(frontTextureID),
				backTextureID(backTextureID),
				bottomTextureID(bottomTextureID),
				transmitLight(transmitLight),
				walkSound(walkSound),
				fullBright(fullBright),
				minX(minX),
				minY(minY),
				minZ(minZ),
				maxX(maxX),
				maxY(maxY),
				maxZ(maxZ),
				blockDraw(blockDraw),
				fogDensity(fogDensity),
				fogR(fogR),
				fogG(fogG),
				fogB(fogB)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(blockID);
					writer->WriteMCString(name);
					writer->WriteUInt8(solidity);
					writer->WriteUInt8(movementSpeed);
					writer->WriteUInt8(topTextureID);
					writer->WriteUInt8(leftTextureID);
					writer->WriteUInt8(rightTextureID);
					writer->WriteUInt8(frontTextureID);
					writer->WriteUInt8(backTextureID);
					writer->WriteUInt8(bottomTextureID);
					writer->WriteUInt8(transmitLight);
					writer->WriteUInt8(walkSound);
					writer->WriteUInt8(fullBright);
					writer->WriteUInt8(minX);
					writer->WriteUInt8(minY);
					writer->WriteUInt8(minZ);
					writer->WriteUInt8(maxX);
					writer->WriteUInt8(maxY);
					writer->WriteUInt8(maxZ);
					writer->WriteUInt8(blockDraw);
					writer->WriteUInt8(fogDensity);
					writer->WriteUInt8(fogR);
					writer->WriteUInt8(fogG);
					writer->WriteUInt8(fogB);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetTextColorPacket final : public Packet {
		public:
			uint8_t red;
			uint8_t green;
			uint8_t blue;
			uint8_t alpha;
			uint8_t code;

			SetTextColorPacket() : SetTextColorPacket(0, 0, 0, 0, 0) {}
			SetTextColorPacket(uint8_t red, uint8_t green, uint8_t blue, uint8_t alpha, uint8_t code) :
				Packet(Opcodes::kSetTextColor, kSetTextColorSize),
				red(red),
				green(green),
				blue(blue),
				alpha(alpha),
				code(code)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(red);
					writer->WriteUInt8(green);
					writer->WriteUInt8(blue);
					writer->WriteUInt8(alpha);
					writer->WriteUInt8(code);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetMapEnvURLPacket final : public Packet {
		public:
			Utils::MCString texturePackURL;

			SetMapEnvURLPacket() : SetMapEnvURLPacket(std::string()) {}
			SetMapEnvURLPacket(Utils::MCString texturePackURL) :
				Packet(Opcodes::kSetMapEnvURL, kSetMapEnvURLSize),
				texturePackURL(texturePackURL)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteMCString(texturePackURL);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetMapEnvPropertyPacket final : public Packet {
		public:
			uint8_t propertyType;
			int32_t propertyValue;

			SetMapEnvPropertyPacket() : SetMapEnvPropertyPacket(0, 0) {}
			SetMapEnvPropertyPacket(uint8_t propertyType, int32_t propertyValue) :
				Packet(Opcodes::kSetMapEnvProperty, kSetMapEnvPropertySize),
				propertyType(propertyType),
				propertyValue(propertyValue)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(propertyType);
					writer->WriteInt32(htonl(propertyValue));
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetEntityPropertyPacket final : public Packet {
		public:
			uint8_t entityID;
			uint8_t propertyType;
			int32_t propertyValue;

			SetEntityPropertyPacket() : SetEntityPropertyPacket(0, 0, 0) {}
			SetEntityPropertyPacket(uint8_t entityID, uint8_t propertyType, int32_t propertyValue) :
				Packet(Opcodes::kSetEntityProperty, kSetEntityPropertySize),
				entityID(entityID),
				propertyType(propertyType),
				propertyValue(propertyValue)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(entityID);
					writer->WriteUInt8(propertyType);
					writer->WriteInt32(htonl(propertyValue));
				}

				return std::move(writer);
			}
		};
		// Server <-> Client
		class TwoWayPingPacket final : public Packet {
		public:
			uint8_t direction;
			uint16_t data;

			TwoWayPingPacket() : TwoWayPingPacket(0, 0) {}
			TwoWayPingPacket(uint8_t direction, uint16_t data) :
				Packet(Opcodes::kTwoWayPing, kTwoWayPingSize),
				direction(direction),
				data(data)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
				// Skip opcode because each packet knows its opcode
				reader.Skip(sizeof(m_opcode));

				reader.ReadUInt8(direction);
				reader.ReadUInt16(data);

				data = ntohs(data);
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(direction);
					writer->WriteUInt16(htons(data));
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetInventoryOrderPacket final : public Packet {
		public:
			uint8_t order;
			uint8_t blockID;

			SetInventoryOrderPacket() : SetInventoryOrderPacket(0, 0) {}
			SetInventoryOrderPacket(uint8_t order, uint8_t blockID) :
				Packet(Opcodes::kSetInventoryOrder, kSetInventoryOrderSize),
				order(order),
				blockID(blockID)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(order);
					writer->WriteUInt8(blockID);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetHotbarPacket final : public Packet {
		public:
			uint8_t blockID;
			uint8_t hotbarIndex;

			SetHotbarPacket() : SetHotbarPacket(0, 0) {}
			SetHotbarPacket(uint8_t blockID, uint8_t hotbarIndex) :
				Packet(Opcodes::kSetHotbar, kSetHotbarSize),
				blockID(blockID),
				hotbarIndex(hotbarIndex)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(blockID);
					writer->WriteUInt8(hotbarIndex);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SetSpawnpointPacket final : public Packet {
		public:
			int16_t spawnX;
			int16_t spawnY;
			int16_t spawnZ;
			uint8_t spawnYaw;
			uint8_t spawnPitch;

			SetSpawnpointPacket() : SetSpawnpointPacket(0, 0, 0, 0, 0) {}
			SetSpawnpointPacket(int16_t spawnX, int16_t spawnY, int16_t spawnZ, uint8_t spawnYaw, uint8_t spawnPitch) :
				Packet(Opcodes::kSetSpawnpoint, kSetSpawnpointSize),
				spawnX(spawnX),
				spawnY(spawnY),
				spawnZ(spawnZ),
				spawnYaw(spawnYaw),
				spawnPitch(spawnPitch)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteInt16(htons(spawnX));
					writer->WriteInt16(htons(spawnY));
					writer->WriteInt16(htons(spawnZ));
					writer->WriteUInt8(spawnYaw);
					writer->WriteUInt8(spawnPitch);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class VelocityControlPacket final : public Packet {
		public:
			int32_t velocityX;
			int32_t velocityY;
			int32_t velocityZ;
			uint8_t modeX;
			uint8_t modeY;
			uint8_t modeZ;

			VelocityControlPacket() : VelocityControlPacket(0, 0, 0, 0, 0, 0) {}
			VelocityControlPacket(int32_t velocityX, int32_t velocityY, int32_t velocityZ, uint8_t modeX, uint8_t modeY, uint8_t modeZ) :
				Packet(Opcodes::kVelocityControl, kVelocityControlSize),
				velocityX(velocityX),
				velocityY(velocityY),
				velocityZ(velocityZ),
				modeX(modeX),
				modeY(modeY),
				modeZ(modeZ)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteInt32(htonl(velocityX));
					writer->WriteInt32(htonl(velocityY));
					writer->WriteInt32(htonl(velocityZ));
					writer->WriteUInt8(modeX);
					writer->WriteUInt8(modeY);
					writer->WriteUInt8(modeZ);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class DefineEffectPacket final : public Packet {
		public:
			uint8_t effectID;
			uint8_t u1;
			uint8_t v1;
			uint8_t u2;
			uint8_t v2;
			uint8_t redTint;
			uint8_t greenTint;
			uint8_t blueTint;
			uint8_t frameCount;
			uint8_t particleCount;
			uint8_t size;
			int32_t sizeVariation;
			uint16_t spread;
			int32_t speed;
			int32_t gravity;
			int32_t baseLifetime;
			int32_t lifetimeVariation;
			uint8_t collideFlags;
			uint8_t fullBright;

			DefineEffectPacket() : DefineEffectPacket(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) {}
			DefineEffectPacket(uint8_t effectID, uint8_t u1, uint8_t v1, uint8_t u2, uint8_t v2, uint8_t redTint, uint8_t greenTint, uint8_t blueTint, uint8_t frameCount, uint8_t particleCount, uint8_t size, int32_t sizeVariation, uint16_t spread, int32_t speed, int32_t gravity, int32_t baseLifetime, int32_t lifetimeVariation, uint8_t collideFlags, uint8_t fullBright) :
				Packet(Opcodes::kDefineEffect, kDefineEffectSize),
				effectID(effectID),
				u1(u1),
				v1(v1),
				u2(u2),
				v2(v2),
				redTint(redTint),
				greenTint(greenTint),
				blueTint(blueTint),
				frameCount(frameCount),
				particleCount(particleCount),
				size(size),
				sizeVariation(sizeVariation),
				spread(spread),
				speed(speed),
				gravity(gravity),
				baseLifetime(baseLifetime),
				lifetimeVariation(lifetimeVariation),
				collideFlags(collideFlags),
				fullBright(fullBright)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(effectID);
					writer->WriteUInt8(u1);
					writer->WriteUInt8(v1);
					writer->WriteUInt8(u2);
					writer->WriteUInt8(v2);
					writer->WriteUInt8(redTint);
					writer->WriteUInt8(greenTint);
					writer->WriteUInt8(blueTint);
					writer->WriteUInt8(frameCount);
					writer->WriteUInt8(particleCount);
					writer->WriteUInt8(size);
					writer->WriteInt32(htonl(sizeVariation));
					writer->WriteUInt16(htons(spread));
					writer->WriteInt32(htonl(speed));
					writer->WriteInt32(htonl(gravity));
					writer->WriteInt32(htonl(baseLifetime));
					writer->WriteInt32(htonl(lifetimeVariation));
					writer->WriteUInt8(collideFlags);
					writer->WriteUInt8(fullBright);
				}

				return std::move(writer);
			}
		};
		// Server -> Client
		class SpawnEffectPacket final : public Packet {
		public:
			uint8_t effectID;
			int32_t positionX;
			int32_t positionY;
			int32_t positionZ;
			int32_t originX;
			int32_t originY;
			int32_t originZ;

			SpawnEffectPacket() : SpawnEffectPacket(0, 0, 0, 0, 0, 0, 0) {}
			SpawnEffectPacket(uint8_t effectID, int32_t positionX, int32_t positionY, int32_t positionZ, int32_t originX, int32_t originY, int32_t originZ) :
				Packet(Opcodes::kSpawnEffect, kSpawnEffectSize),
				effectID(effectID),
				positionX(positionX),
				positionY(positionY),
				positionZ(positionZ),
				originX(originX),
				originY(originY),
				originZ(originZ)
			{}

			virtual void Deserialize(Utils::BufferStream& reader) override
			{
			}

			virtual std::unique_ptr<Utils::BufferStream> Serialize() override
			{
				auto writer = std::make_unique<Utils::BufferStream>(m_packetSize);

				if (writer != nullptr) {
					writer->WriteUInt8(m_opcode);
					writer->WriteUInt8(effectID);
					writer->WriteInt32(htonl(positionX));
					writer->WriteInt32(htonl(positionY));
					writer->WriteInt32(htonl(positionZ));
					writer->WriteInt32(htonl(originX));
					writer->WriteInt32(htonl(originY));
					writer->WriteInt32(htonl(originZ));
				}

				return std::move(writer);
			}
		};

		static std::shared_ptr<Packet> MakeExtInfoPacket(
			Utils::MCString appName,
			uint16_t extensionCount
		);
		static std::shared_ptr<Packet> MakeExtEntryPacket(
			Utils::MCString extName,
			uint32_t version
		);
		static std::shared_ptr<Packet> MakeSetClickDistancePacket(
			uint16_t distance
		);
		static std::shared_ptr<Packet> MakeCustomBlocksPacket(
			uint8_t supportLevel
		);
		static std::shared_ptr<Packet> MakeHoldThisPacket(
			uint8_t blockToHold,
			uint8_t preventChange
		);
		static std::shared_ptr<Packet> MakeSetTextHotKeyPacket(
			Utils::MCString label,
			Utils::MCString action,
			uint32_t keyCode,
			uint8_t keyMods
		);
		static std::shared_ptr<Packet> MakeExtAddPlayerNamePacket(
			uint16_t nameID,
			Utils::MCString playerName,
			Utils::MCString listName,
			Utils::MCString groupName,
			uint8_t groupRank
		);
		static std::shared_ptr<Packet> MakeExtAddEntity2Packet(
			uint8_t entityID,
			Utils::MCString inGameName,
			Utils::MCString skinName,
			int16_t spawnX,
			int16_t spawnY,
			int16_t spawnZ,
			uint8_t spawnYaw,
			uint8_t spawnPitch
		);
		static std::shared_ptr<Packet> MakeExtRemovePlayerNamePacket(
			uint16_t nameID
		);
		static std::shared_ptr<Packet> MakeEnvSetColorPacket(
			uint8_t variable,
			uint16_t red,
			uint16_t green,
			uint16_t blue
		);
		static std::shared_ptr<Packet> MakeMakeSelectionPacket(
			uint8_t selectionID,
			Utils::MCString label,
			int16_t startX,
			int16_t startY,
			int16_t startZ,
			int16_t endX,
			int16_t endY,
			int16_t endZ,
			uint16_t red,
			uint16_t green,
			uint16_t blue,
			uint16_t opacity
		);
		static std::shared_ptr<Packet> MakeRemoveSelectionPacket(
			uint8_t selectionID
		);
		static std::shared_ptr<Packet> MakeSetBlockPermissionPacket(
			uint8_t blockType,
			uint8_t allowPlacement,
			uint8_t allowDeletion
		);
		static std::shared_ptr<Packet> MakeChangeModelPacket(
			uint8_t entityID,
			Utils::MCString modelName
		);
		static std::shared_ptr<Packet> MakeEnvSetWeatherTypePacket(
			uint8_t weatherType
		);
		static std::shared_ptr<Packet> MakeHackControlPacket(
			uint8_t flying,
			uint8_t noClip,
			uint8_t speeding,
			uint8_t spawnControl,
			uint8_t thirdPersonView,
			int16_t jumpHeight
		);
		static std::shared_ptr<Packet> MakeDefineBlockPacket(
			uint8_t blockID,
			Utils::MCString name,
			uint8_t solidity,
			uint8_t movementSpeed,
			uint8_t topTextureID,
			uint8_t sideTextureID,
			uint8_t bottomTextureID,
			uint8_t transmitLight,
			uint8_t walkSound,
			uint8_t fullBright,
			uint8_t shape,
			uint8_t blockDraw,
			uint8_t fogDensity,
			uint8_t fogR,
			uint8_t fogG,
			uint8_t fogB
		);
		static std::shared_ptr<Packet> MakeRemoveBlockDefinitionPacket(
			uint8_t blockID
		);
		static std::shared_ptr<Packet> MakeDefineBlockExtPacket(
			uint8_t blockID,
			Utils::MCString name,
			uint8_t solidity,
			uint8_t movementSpeed,
			uint8_t topTextureID,
			uint8_t leftTextureID,
			uint8_t rightTextureID,
			uint8_t frontTextureID,
			uint8_t backTextureID,
			uint8_t bottomTextureID,
			uint8_t transmitLight,
			uint8_t walkSound,
			uint8_t fullBright,
			uint8_t minX,
			uint8_t minY,
			uint8_t minZ,
			uint8_t maxX,
			uint8_t maxY,
			uint8_t maxZ,
			uint8_t blockDraw,
			uint8_t fogDensity,
			uint8_t fogR,
			uint8_t fogG,
			uint8_t fogB
		);
		static std::shared_ptr<Packet> MakeSetTextColorPacket(
			uint8_t red,
			uint8_t green,
			uint8_t blue,
			uint8_t alpha,
			uint8_t code
		);
		static std::shared_ptr<Packet> MakeSetMapEnvURLPacket(
			Utils::MCString texturePackURL
		);
		static std::shared_ptr<Packet> MakeSetMapEnvPropertyPacket(
			uint8_t propertyType,
			int32_t propertyValue
		);
		static std::shared_ptr<Packet> MakeSetEntityPropertyPacket(
			uint8_t entityID,
			uint8_t propertyType,
			int32_t propertyValue
		);
		static std::shared_ptr<Packet> MakeTwoWayPingPacket(
			uint8_t direction,
			uint16_t data
		);
		static std::shared_ptr<Packet> MakeSetInventoryOrderPacket(
			uint8_t order,
			uint8_t blockID
		);
		static std::shared_ptr<Packet> MakeSetHotbarPacket(
			uint8_t blockID,
			uint8_t hotbarIndex
		);
		static std::shared_ptr<Packet> MakeSetSpawnpointPacket(
			int16_t spawnX,
			int16_t spawnY,
			int16_t spawnZ,
			uint8_t spawnYaw,
			uint8_t spawnPitch
		);
		static std::shared_ptr<Packet> MakeVelocityControlPacket(
			int32_t velocityX,
			int32_t velocityY,
			int32_t velocityZ,
			uint8_t modeX,
			uint8_t modeY,
			uint8_t modeZ
		);
		static std::shared_ptr<Packet> MakeDefineEffectPacket(
			uint8_t effectID,
			uint8_t u1,
			uint8_t v1,
			uint8_t u2,
			uint8_t v2,
			uint8_t redTint,
			uint8_t greenTint,
			uint8_t blueTint,
			uint8_t frameCount,
			uint8_t particleCount,
			uint8_t size,
			int32_t sizeVariation,
			uint16_t spread,
			int32_t speed,
			int32_t gravity,
			int32_t baseLifetime,
			int32_t lifetimeVariation,
			uint8_t collideFlags,
			uint8_t fullBright
		);
		static std::shared_ptr<Packet> MakeSpawnEffectPacket(
			uint8_t effectID,
			int32_t positionX,
			int32_t positionY,
			int32_t positionZ,
			int32_t originX,
			int32_t originY,
			int32_t originZ
		);
		/* END AUTOGENERATED CODE SECTION */

		std::function<void(std::shared_ptr<Client>, const ExtInfoPacket&)> onExtInfoCallback;
		std::function<void(std::shared_ptr<Client>, const ExtEntryPacket&)> onExtEntryCallback;
		std::function<void(std::shared_ptr<Client>, const CustomBlocksPacket&)> onCustomBlocksCallback;
		std::function<void(std::shared_ptr<Client>, const PlayerClickedPacket&)> onPlayerClickedCallback;
		std::function<void(std::shared_ptr<Client>, const TwoWayPingPacket&)> onTwoWayPingCallback;

		ExtendedProtocol();

		virtual ~ExtendedProtocol() {}

		ExtendedProtocol(const ExtendedProtocol&) = delete;
		ExtendedProtocol& operator=(const ExtendedProtocol&) = delete;

		virtual size_t GetPacketSize(uint8_t opcode) const override;

		virtual bool HandleOpcode(uint8_t opcode, std::shared_ptr<Client> client, Utils::BufferStream& reader) const override;

	private:
		std::map<Opcodes, OpcodeHandler> m_defaultPacketHandlers;

		void ExtInfoOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader);
		void ExtEntryOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader);
		void CustomBlocksOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader);
		void PlayerClickedOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader);
		void TwoWayPingOpcodeHandler(std::shared_ptr<Client> client, Utils::BufferStream& reader);
	};
} // namespace Net

#endif // EXTENDEDPROTOCOL_H_
